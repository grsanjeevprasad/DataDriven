<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="345c3501-e841-418a-b431-e8fbbd1e3208" activeEnvironment="Default" name="Datadriven" resourceRoot="" soapui-version="5.4.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="TestSuite" value="Calfunctions"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value=""/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Export JUnit Results with test properties" value="true"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Username" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="Root Folder" value="C:\SoapuiProject\Reports"/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Save Project" value="false"/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:WsdlInterface" id="84bf946b-256c-49aa-8211-01960c2afef5" wsaVersion="NONE" name="ICalculator" type="wsdl" bindingName="{http://www.parasoft.com/wsdl/calculator/}ICalculator" soapVersion="1_1" anonymous="optional" definition="file:/C:/SoapuiProject/calculator.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:\C:\SoapuiProject\calculator.wsdl"><con:part><con:url>file:\C:\SoapuiProject\calculator.wsdl</con:url><con:content><![CDATA[<!--generated by GLUE Standard 4.1.2 on Fri Nov 21 13:50:48 PST 2003-->
<wsdl:definitions name="Calculator" targetNamespace="http://www.parasoft.com/wsdl/calculator/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:tme="http://www.themindelectric.com/" xmlns:tns="http://www.parasoft.com/wsdl/calculator/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <xsd:schema elementFormDefault="qualified" targetNamespace="http://www.parasoft.com/wsdl/calculator/">
      <xsd:element name="add">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="x" type="xsd:float"/>
            <xsd:element name="y" type="xsd:float"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="addResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="Result" type="xsd:float"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="divide">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="numerator" type="xsd:float"/>
            <xsd:element name="denominator" type="xsd:float"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="divideResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="Result" type="xsd:float"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="multiply">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="x" type="xsd:float"/>
            <xsd:element name="y" type="xsd:float"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="multiplyResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="Result" type="xsd:float"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="subtract">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="x" type="xsd:float"/>
            <xsd:element name="y" type="xsd:float"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="subtractResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="Result" type="xsd:float"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="add0In">
    <wsdl:part element="tns:add" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="add0Out">
    <wsdl:part element="tns:addResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="divide1In">
    <wsdl:part element="tns:divide" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="divide1Out">
    <wsdl:part element="tns:divideResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="multiply2In">
    <wsdl:part element="tns:multiply" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="multiply2Out">
    <wsdl:part element="tns:multiplyResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="subtract3In">
    <wsdl:part element="tns:subtract" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="subtract3Out">
    <wsdl:part element="tns:subtractResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:portType name="ICalculator">
    <wsdl:operation name="add" parameterOrder="x y">
      <wsdl:input message="tns:add0In" name="add0In"/>
      <wsdl:output message="tns:add0Out" name="add0Out"/>
    </wsdl:operation>
    <wsdl:operation name="divide" parameterOrder="numerator denominator">
      <wsdl:input message="tns:divide1In" name="divide1In"/>
      <wsdl:output message="tns:divide1Out" name="divide1Out"/>
    </wsdl:operation>
    <wsdl:operation name="multiply" parameterOrder="x y">
      <wsdl:input message="tns:multiply2In" name="multiply2In"/>
      <wsdl:output message="tns:multiply2Out" name="multiply2Out"/>
    </wsdl:operation>
    <wsdl:operation name="subtract" parameterOrder="x y">
      <wsdl:input message="tns:subtract3In" name="subtract3In"/>
      <wsdl:output message="tns:subtract3Out" name="subtract3Out"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="ICalculator" type="tns:ICalculator">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="add">
      <soap:operation soapAction="add" style="document"/>
      <wsdl:input name="add0In">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="add0Out">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="divide">
      <soap:operation soapAction="divide" style="document"/>
      <wsdl:input name="divide1In">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="divide1Out">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="multiply">
      <soap:operation soapAction="multiply" style="document"/>
      <wsdl:input name="multiply2In">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="multiply2Out">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="subtract">
      <soap:operation soapAction="subtract" style="document"/>
      <wsdl:input name="subtract3In">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="subtract3Out">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="Calculator">
    <wsdl:documentation>instance of class webtool.soap.examples.calculator.Calculator</wsdl:documentation>
    <wsdl:port binding="tns:ICalculator" name="ICalculator">
      <soap:address location="http://ws1.parasoft.com/glue/calculator"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://ws1.parasoft.com/glue/calculator</con:endpoint></con:endpoints><con:operation id="d81a8eea-8e4b-4532-b3e9-f6ad61ba5dcb" isOneWay="false" action="add" name="add" bindingOperationName="add" type="Request-Response" outputName="add0Out" inputName="add0In" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="27c5cf72-8f99-42d7-9981-5eafd55e0402" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ws1.parasoft.com/glue/calculator</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cal="http://www.parasoft.com/wsdl/calculator/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <cal:add>\r
         <cal:x>2</cal:x>\r
         <cal:y>3</cal:y>\r
      </cal:add>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="add"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation id="4753d8c3-1346-4ae5-92ec-08a81d0a1c1d" isOneWay="false" action="divide" name="divide" bindingOperationName="divide" type="Request-Response" outputName="divide1Out" inputName="divide1In" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="9b478b2c-3692-44ca-ae9c-e535fd4911ef" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://ws1.parasoft.com/glue/calculator</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cal="http://www.parasoft.com/wsdl/calculator/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <cal:divide>\r
         <cal:numerator>?</cal:numerator>\r
         <cal:denominator>?</cal:denominator>\r
      </cal:divide>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="divide"/></con:call></con:operation><con:operation id="0afc92b4-5924-4602-8aa9-80535c3177f3" isOneWay="false" action="multiply" name="multiply" bindingOperationName="multiply" type="Request-Response" outputName="multiply2Out" inputName="multiply2In" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="6443daf4-f2f8-4283-a068-09c84b848753" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://ws1.parasoft.com/glue/calculator</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cal="http://www.parasoft.com/wsdl/calculator/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <cal:multiply>\r
         <cal:x>?</cal:x>\r
         <cal:y>?</cal:y>\r
      </cal:multiply>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="multiply"/></con:call></con:operation><con:operation id="2f7c8300-5743-404a-9a5a-b10b485197c8" isOneWay="false" action="subtract" name="subtract" bindingOperationName="subtract" type="Request-Response" outputName="subtract3Out" inputName="subtract3In" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="d98797d2-1b5d-4aef-b370-40092489916a" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://ws1.parasoft.com/glue/calculator</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cal="http://www.parasoft.com/wsdl/calculator/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <cal:subtract>\r
         <cal:x>?</cal:x>\r
         <cal:y>?</cal:y>\r
      </cal:subtract>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:wsaConfig mustUnderstand="NONE" version="200508" action="subtract"/></con:call></con:operation></con:interface><con:testSuite id="a8344e04-37ef-4dd0-a449-20ea56659942" name="Calfunctions"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="3b7e4d32-ecef-4692-aaa6-de4acf29000b" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="add" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Add Grrovy" id="96ae082a-6db8-4061-92d0-22f3282f6dbf"><con:settings/><con:config><script>
def inputFile="C:\\SoapuiProject\\TestData\\Calculator.xls"

// Get a reference to the library
library = testRunner.testCase.testSuite.project.testSuites["Library"]

// Get the module within the library
module = library.testCases["Calfunction"].testSteps["DataDriven"]

// Initialise library
module.run(testRunner, context)

//Get the instance of DataDriven from the context
def dataDriven = context.dataDriven

// Run the test
dataDriven.execute(inputFile, 0, "AddResults_", "add")
log.info "Finished"
</script></con:config></con:testStep><con:testStep type="request" id="be03cff1-7d1b-40fd-8e45-82cef99b5a0f" name="add"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>ICalculator</con:interface><con:operation>add</con:operation><con:request name="add" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="bbaaf7f6-1798-4d37-a227-f89bba20d608"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ws1.parasoft.com/glue/calculator</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cal="http://www.parasoft.com/wsdl/calculator/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <cal:add>\r
         <cal:x>${#TestCase#a}</cal:x>\r
         <cal:y>${#TestCase#b}</cal:y>\r
      </cal:add>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="ce28f962-7f16-41fb-a5a0-a417921d61d7" name="SOAP Response"/><con:assertion type="GroovyScriptAssertion" id="3d2c59d6-c594-4e82-824b-59c41d8d306c" name="Script Assertion"><con:configuration><scriptText>import java.util.*;

import java.lang.*;

import jxl.*;

import jxl.write.*;

import jxl.*

import com.eviware.soapui.support.XmlHolder

import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

import com.eviware.soapui.support.GroovyUtils


Response=messageExchange.response.responseContent
log.info Response

def holder=new XmlHolder(Response)

def Result1=holder.getNodeValue("//n:Result");
def ActualResult=String.valueOf(Result1)

def ExpectedResult=context.expand('${#TestCase#c}')

assert ExpectedResult==ActualResult
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="add"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>FirstNumber</con:name><con:value>1</con:value></con:property><con:property><con:name>SecondNumber</con:name><con:value>2</con:value></con:property><con:property><con:name>a</con:name><con:value>100</con:value></con:property><con:property><con:name>b</con:name><con:value>200</con:value></con:property><con:property><con:name>c</con:name><con:value>300.0</con:value></con:property></con:properties></con:testCase><con:testCase id="70aa1601-1aaa-4d18-a5a9-dd205c9d6eab" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Subtract" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Subract Groovy" id="8f0cefd1-dd22-4dea-a3ec-ba1ff018329d"><con:settings/><con:config><script>
def inputFile="C:\\SoapuiProject\\TestData\\Calculator.xls"

// Get a reference to the library
library = testRunner.testCase.testSuite.project.testSuites["Library"]

// Get the module within the library
module = library.testCases["Calfunction"].testSteps["DataDriven"]

// Initialise library
module.run(testRunner, context)

//Get the instance of DataDriven from the context
def dataDriven = context.dataDriven

// Run the test
dataDriven.execute(inputFile, 1, "SubResults_", "Sub")
log.info "Finished"
</script></con:config></con:testStep><con:testStep type="request" name="Sub" id="79b90d8d-4b00-4627-9cfc-c9514a6c5252"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>ICalculator</con:interface><con:operation>subtract</con:operation><con:request name="Sub" id="3cdb3c17-0967-438d-aa26-146aa67cc1a5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ws1.parasoft.com/glue/calculator</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cal="http://www.parasoft.com/wsdl/calculator/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <cal:subtract>\r
         <cal:x>${#TestCase#a}</cal:x>\r
         <cal:y>${#TestCase#b}</cal:y>\r
      </cal:subtract>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="1a071977-169a-4c73-83b3-00bc9a397e79"/><con:assertion type="GroovyScriptAssertion" id="5f98813f-0cfa-4256-8e69-0c7c46a1f0c4" name="Script Assertion"><con:configuration><scriptText>import java.util.*;

import java.lang.*;

import jxl.*;

import jxl.write.*;

import jxl.*

import com.eviware.soapui.support.XmlHolder

import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

import com.eviware.soapui.support.GroovyUtils


Response=messageExchange.response.responseContent
log.info Response

def holder=new XmlHolder(Response)

def Result1=holder.getNodeValue("//n:Result");
def ActualResult=String.valueOf(Result1)

def ExpectedResult=context.expand('${#TestCase#c}')

assert ExpectedResult==ActualResult
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>a</con:name><con:value>50</con:value></con:property><con:property><con:name>b</con:name><con:value>25</con:value></con:property><con:property><con:name>c</con:name><con:value>25.0</con:value></con:property></con:properties></con:testCase><con:testCase id="84fa1cd8-021b-426c-9c0a-d4a6cead486a" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Multiply" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Multiply Script" id="e61dba71-16a6-4da0-8c64-3d02166d91e9"><con:settings/><con:config><script>
def inputFile="C:\\SoapuiProject\\TestData\\Calculator.xls"

// Get a reference to the library
library = testRunner.testCase.testSuite.project.testSuites["Library"]

// Get the module within the library
module = library.testCases["Calfunction"].testSteps["DataDriven"]

// Initialise library
module.run(testRunner, context)

//Get the instance of DataDriven from the context
def dataDriven = context.dataDriven

// Run the test
dataDriven.execute(inputFile, 2, "MulResults_", "Mul")
log.info "Finished"
</script></con:config></con:testStep><con:testStep type="request" name="Mul" id="80c0ba6f-407c-4a69-bc85-b7c66536c075"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>ICalculator</con:interface><con:operation>multiply</con:operation><con:request name="Mul" id="d16937f2-2d62-4a3d-9209-0dded843ac87"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ws1.parasoft.com/glue/calculator</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cal="http://www.parasoft.com/wsdl/calculator/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <cal:multiply>\r
         <cal:x>${#TestCase#a}</cal:x>\r
         <cal:y>${#TestCase#b}</cal:y>\r
      </cal:multiply>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="12b5e003-9c24-49c8-ac99-c0c63c7fc65d"/><con:assertion type="GroovyScriptAssertion" id="10d03b60-0420-4f10-8972-975f907eb5d5" name="Script Assertion"><con:configuration><scriptText>import java.util.*;

import java.lang.*;

import jxl.*;

import jxl.write.*;

import jxl.*

import com.eviware.soapui.support.XmlHolder

import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

import com.eviware.soapui.support.GroovyUtils


Response=messageExchange.response.responseContent
log.info Response

def holder=new XmlHolder(Response)

def Result1=holder.getNodeValue("//n:Result");
def ActualResult=String.valueOf(Result1)

def ExpectedResult=context.expand('${#TestCase#c}')

assert ExpectedResult==ActualResult
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>a</con:name><con:value>50</con:value></con:property><con:property><con:name>b</con:name><con:value>25</con:value></con:property><con:property><con:name>c</con:name><con:value>1250.0</con:value></con:property></con:properties></con:testCase><con:testCase id="e64bd96e-2185-4804-89bc-c5f03cba875b" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Divide" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Divide Script" id="a06fd6d8-59a9-4b8f-9e23-0486f06abdb3"><con:settings/><con:config><script>
def inputFile="C:\\SoapuiProject\\TestData\\Calculator.xls"

// Get a reference to the library
library = testRunner.testCase.testSuite.project.testSuites["Library"]

// Get the module within the library
module = library.testCases["Calfunction"].testSteps["DataDriven"]

// Initialise library
module.run(testRunner, context)

//Get the instance of DataDriven from the context
def dataDriven = context.dataDriven

// Run the test
dataDriven.execute(inputFile, 3, "DivResults_", "Div")
log.info "Finished"
</script></con:config></con:testStep><con:testStep type="request" name="Div" id="82765b33-0945-4a2f-9db5-3b94d38165af"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>ICalculator</con:interface><con:operation>divide</con:operation><con:request name="Div" id="16d723ef-8c49-4b74-8157-1c70f9922f13"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ws1.parasoft.com/glue/calculator</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cal="http://www.parasoft.com/wsdl/calculator/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <cal:divide>\r
         <cal:numerator>${#TestCase#a}</cal:numerator>\r
         <cal:denominator>${#TestCase#b}</cal:denominator>\r
      </cal:divide>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="5b5f83b5-403f-4c91-9c26-e853930e6c0b"/><con:assertion type="GroovyScriptAssertion" id="c0fa1384-2ad6-4720-ad1d-17a9f423f6c1" name="Script Assertion"><con:configuration><scriptText>import java.util.*;

import java.lang.*;

import jxl.*;

import jxl.write.*;

import jxl.*

import com.eviware.soapui.support.XmlHolder

import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

import com.eviware.soapui.support.GroovyUtils


Response=messageExchange.response.responseContent
log.info Response

def holder=new XmlHolder(Response)

def Result1=holder.getNodeValue("//n:Result");
def ActualResult=String.valueOf(Result1)

def ExpectedResult=context.expand('${#TestCase#c}')

assert ExpectedResult==ActualResult
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>a</con:name><con:value>200</con:value></con:property><con:property><con:name>b</con:name><con:value>25</con:value></con:property><con:property><con:name>c</con:name><con:value>8.0</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="996313e5-0007-47d8-91f6-93d1dd60cde5" name="Library" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="8e780c52-efe9-4f3e-924f-db83399bb836" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Calfunction" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DataDriven" id="53d01462-4aa5-4069-8f00-5c59af819a08"><con:settings/><con:config><script>import java.util.Date;
import java.io.File;
import java.util.*;
import java.lang.*;
import jxl.*;
import jxl.write.*;
import jxl.*
import com.eviware.soapui.support.XmlHolder
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner
import com.eviware.soapui.support.GroovyUtils


class DataDriven
{

	def log
	def context
	def testRunner
	
	def DataDriven(logIn, contextIn, testRunnerIn)
	{
		this.log = logIn
		this.context = contextIn
		this.testRunner = testRunnerIn
	}

	def execute(inputFileName, worksheetIndex, outputFileName, testRequest) {
		// Create a object for Workbook class
		Workbook workbook = Workbook.getWorkbook(new File(inputFileName))
		// Create a object for Sheet class. Put the sheet number you want to access in the getSheet() method
		Sheet sheet = workbook.getSheet(worksheetIndex)
		//Get the row count and column count
		def rowCount = sheet.getRows()
		def colCount = sheet.getColumns()
		//store the data in a array list then create a array with the size equals the column count
		def a = [colCount]
		def dir="C:\\SoapuiProject\\TestResults\\"
		def d1=new Date().format("yyyy-MM-ddHHmmss")
		def outputFile = outputFileName + d1 + ".xls"
		//Declare a new file object 
		File exlFile = new File(dir + outputFile);
		WritableWorkbook writableWorkbook = Workbook.createWorkbook(exlFile);
		WritableSheet writableSheet = writableWorkbook.createSheet("Result", 0);
		writableSheet.addCell(new Label(0, 0, "Description"));
		writableSheet.addCell(new Label(1, 0, "FirstNumber"));
		writableSheet.addCell(new Label(2, 0, "SecondNumber"));
		writableSheet.addCell(new Label(3, 0, "ExpectedResult"));
		writableSheet.addCell(new Label(4, 0, "ActualResult"));
		writableSheet.addCell(new Label(5, 0, "Result"));       
		for (def i=1; i&lt;rowCount; i++){
		   for (def j=0; j&lt;colCount; j++){
		   	def valCellContents=sheet.getCell(j,i)
			def cellContents=valCellContents.getContents()
		   	log.info cellContents
		   	a[j]=cellContents
  			}
			def Description=a[0]
			log.info Description
			def FirstNumber=a[1]
			log.info FirstNumber
			def SecondNumber=a[2]
			log.info SecondNumber
			def ExpectedResult1=a[3]
			def ExpectedResult2=Float.valueOf(ExpectedResult1)
			def ExpectedResult=String.valueOf(ExpectedResult2)
			log.info "ExpectedResult" +ExpectedResult
			def TC = testRunner.testCase
			TC.setPropertyValue( "a",FirstNumber)
			TC.setPropertyValue( "b",SecondNumber)
			TC.setPropertyValue( "c",ExpectedResult)
			testRunner.runTestStepByName(testRequest) 
			// Retrieve Response
			def response1 = context.expand('${' + testRequest + '#response}')
			log.info "Response" + response1
			def holder = new XmlHolder(response1);
			def Result1=holder.getNodeValue("//n:Result");
			def ActualResult=String.valueOf(Result1)
			log.info 'ActualResult'+ ActualResult 
			def Result=""
			if (ExpectedResult==ActualResult)
			{
				 Result="Pass"
			}
			 else
			{
                	Result="Fail"		
			}
			log.info Result
		  	writableSheet.addCell(new Label(0, i,Description ));
		   	writableSheet.addCell(new Label(1, i, FirstNumber));
		  	writableSheet.addCell(new Label(2, i, SecondNumber));
		  	writableSheet.addCell(new Label(3, i,String.valueOf(ExpectedResult)));
		  	writableSheet.addCell(new Label(4, i,String.valueOf(ActualResult)));
			writableSheet.addCell(new Label(5, i,Result));
			log.info '*******************'
	}
     writableWorkbook.write();
     writableWorkbook.close();
	}
}	

context.setProperty("dataDriven", new DataDriven(log, context, testRunner))
log.info "Data driven initialised"</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:afterRunScript>def reportFileName = "C:\\SoapuiProject\\TestResults\\"'


def dataFolder =  new com.eviware.soapui.support.GroovyUtils(context).projectPath




//Create today's date for storing response
def today = new Date().format("yyyy-MM-dd")

def filePrefix = "${dataFolder}/TestReports/xxx_WebAPI_${today}" as String

def fileNamePart = new Date().format("yyyy-MM-dd'T'HH.mm.ss")

//creating filename dynamically.
def reportFileName = "${filePrefix}/xxx_WebAPI_TestReport_${fileNamePart}.txt" as String


//NOTE: Not required to edit beyond this point

/**
* This class holds the test case details
**/
class TestCaseResultHolder {
    def log
    Map&lt;String, String> properties = [:]
    boolean status

    def createProperties(testCase) {
        testCase.getPropertyNames().each { key ->
            properties[key] = testCase.getPropertyValue(key)
        }       
    }

    def getCaseResult(caseRunner, caseName) {
        log.info "Checking test case status ${caseName}"
        if ( caseRunner.status.toString() == 'FAILED' ){
            log.error "Test case $caseName has failed"
            for ( stepResult in caseRunner?.results ){
                stepResult.messages.each() { msg -> log.info msg }
            }
            return false
        } else {
            log.info "${caseName} is passed"
        }
        true
    }

    def buildCaseResult(caseRunner, caseName) {
        status = getCaseResult(caseRunner, caseName)
        if (!status) {
            createProperties(caseRunner.testCase)
        }
    }

}

/**
* This class holds the test suite details
**/
class SuiteResultsHolder {

    def log
    Map&lt;String, TestCaseResultHolder> casaeResults = [:]
    int testCaseCount = 0
    int passedCasesCount = 0
    int failedCasesCount = 0

    def buildSuiteResults(suiteRunner, suiteName){      
        log.info "Building results of test suite ${suiteName}"
        for ( caseRunner in suiteRunner?.results ) {
            def caseName = caseRunner.testCase.name
            testCaseCount++
            def tcHolder = new TestCaseResultHolder(log: log)
            tcHolder.buildCaseResult(caseRunner, caseName)          
            casaeResults[caseName] = tcHolder
            if (tcHolder.status) {
                passedCasesCount++
            } else {
                failedCasesCount++
            }
        }
    }

    def getStatus() {
        (0 &lt; failedCasesCount) ? false : true
    }

}

/**
* This class holds the project details
**/
class ProjectResultsHolder {

    def log
    Map&lt;String, SuiteResultsHolder> suiteResults = [:]
    int suiteCount = 0
    int passedSuitecount = 0
    int failedSuiteCount = 0

    def buildProjectResults(projectRunner, projectName) {
        log.info "Building results of test project ${projectName}"          
        for(suiteRunner in projectRunner?.results) {
            def suiteName =  suiteRunner.testSuite.name
            suiteCount++
            def suiteResultsHolder = new SuiteResultsHolder(log: log)
            suiteResultsHolder.buildSuiteResults(suiteRunner, suiteName)
            suiteResults[suiteName] = suiteResultsHolder
            if (suiteResultsHolder.status) {
                passedSuitecount++
            } else {
                failedSuiteCount++
            }
        }
    }

    def getStatus() {
        (0 &lt; failedSuiteCount) ? false : true
    }

}

//Get the status string based on boolean
def getResult(status){ status == true ? 'SUCCEED' : 'FAILED'}

//Draws a line
def drawLine(def letter = '=', def count = 70) { letter.multiply(count)}

//Gets the summary report
def getSummaryReport(project, projectResultHolder) {
    def report = new StringBuffer()
    report.append(drawLine()).append('\n')
    report.append("\t\t\tTest Execution Summary\n")
    report.append(drawLine('-', 60)).append('\n')
    report.append("Project : ${project.name}\n")
    report.append("Result : ${getResult(projectResultHolder.status)}\n")
    report.append("Total test suites executed: ${projectResultHolder.suiteCount}\n")
    report.append("Test suites passed: ${projectResultHolder.passedSuitecount}\n")
    report.append("Test suites failed: ${projectResultHolder.failedSuiteCount}\n")
    report.append(drawLine()).append('\n')
    report
}

//Gets the test case report
def getTestCaseReport(testCaseReport) {
    def report = new StringBuffer()
    report.append(drawLine('-', 60)).append('\n')
    report.append("\t\tTest Case Details:\n")
    report.append(drawLine('-', 60)).append('\n')
    testCaseReport.each { kase, tcReport ->
        report.append("Name : ${kase}\n")
        report.append("Status : ${getResult(tcReport.status)}\n")
        if (!tcReport.status) {
            report.append("Properties : ${tcReport.properties.toString()}\n")
        }
    }
    report
}

//Get the detailed report
def getDetailedReport(projectResultHolder) {
    def report = new StringBuffer()
    report.append(drawLine()).append('\n')
    report.append("\t\t\tTest Execution Detailed Report\n")
    report.append(drawLine()).append('\n')
    projectResultHolder.suiteResults.each { suite, details ->
        report.append("Test Suite : ${suite}\n")
        report.append("Result : ${getResult(details.status)}\n")
        report.append("Total Cases : ${details.testCaseCount}\n")
        report.append("Cases Passed : ${details.passedCasesCount}\n")
        report.append("Cases Failed: ${details.failedCasesCount}\n")
        report.append(getTestCaseReport(details.casaeResults))
        report.append(drawLine()).append('\n')
        report.append(drawLine()).append('\n')
    }
    report
}

//Save the contents to a file
def saveToFile(file, content) {
    if (!file.parentFile.exists()) {
        file.parentFile.mkdirs()
        log.info "Directory did not exist, created"
    }
    file.write(content) 
    assert file.exists(), "${file.name} not created"
}

def holder = new ProjectResultsHolder(log: log)
holder.buildProjectResults(runner, project.name)

def finalReport = new StringBuffer()
finalReport.append(getSummaryReport(project, holder))
finalReport.append(getDetailedReport(holder))

def reportFile = new File(reportFileName)
saveToFile(reportFile, finalReport.toString())


</con:afterRunScript><con:sensitiveInformation/></con:soapui-project>